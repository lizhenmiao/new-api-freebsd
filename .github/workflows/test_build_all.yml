name: Smart Tag Builder

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Enable test mode (true/false)'
        required: false
        default: 'false'
      test_tags:
        description: 'Comma-separated tags to test (e.g. v1.0.0,v1.0.1)'
        required: false

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.setup.outputs.matrix }}
    steps:
    - name: Validate test tags
      id: validate
      if: inputs.test_mode == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const testTags = process.env.INPUT_TEST_TAGS?.split(',')?.filter(Boolean) || []
          if (testTags.length === 0) {
            core.setFailed('Test mode requires at least one test tag')
          }

          const { data: validTags } = await github.rest.repos.listTags({
            owner: 'Calcium-Ion',
            repo: 'new-api'
          })

          const invalid = testTags.filter(t =>
            !validTags.some(vt => vt.name === t)
          )

          if (invalid.length > 0) {
            core.setFailed(`Invalid tags: ${invalid.join(', ')}`)
          }

          core.setOutput('valid_tags', testTags)

    - name: Prepare build list
      id: setup
      run: |
        if [ "${{ inputs.test_mode }}" = "true" ]; then
          # 测试模式：使用验证后的标签
          TAGS='${{ steps.validate.outputs.valid_tags }}'
        else
          # 正常模式：获取所有未构建标签
          curl -s https://api.github.com/repos/Calcium-Ion/new-api/tags?per_page=100 > tags.json
          curl -s https://api.github.com/repos/$GITHUB_REPOSITORY/releases?per_page=100 > releases.json

          jq -r '.[].name' tags.json > all_tags.txt
          jq -r '.[].tag_name' releases.json > existing.txt

          # 生成缺失标签列表
          grep -Fxvf existing.txt all_tags.txt | tr '\n' ',' | sed 's/,$//' > missing.txt
          TAGS=$(cat missing.txt)
        fi

        # 生成矩阵（修复JSON格式）
        if [ -z "$TAGS" ]; then
          echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
        else
          matrix_json=$(echo "$TAGS" | jq -R 'split(",") | map(select(. != "")) | {include: map({tag: .})}')
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
        fi

  build:
    needs: prepare
    if: ${{ fromJson(needs.prepare.outputs.matrix).include != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
      max-parallel: ${{ inputs.test_mode == 'true' && 3 || 10 }}
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Clone repository
      run: |
        echo "Cloning tag: ${{ matrix.tag }}"
        git clone -b "${{ matrix.tag }}" --depth 1 https://github.com/Calcium-Ion/new-api

    - name: Build Frontend
      working-directory: new-api/web
      run: |
        npm ci
        REACT_APP_VERSION="${{ matrix.tag }}" npm run build

    - name: Build Backend
      uses: vmactions/freebsd-vm@v1
      with:
        usesh: true
        release: 13.2
        prepare: |
          pkg install -y jq wget curl git gcc bash gawk gsed
          wget -q https://dl.google.com/go/go1.23.4.freebsd-amd64.tar.gz
          tar -C /usr/local -xzf go1.23.4.freebsd-amd64.tar.gz
          ln -s /usr/local/go/bin/go /usr/local/bin/go
        run: |
          cd new-api
          go mod download
          go build -ldflags "-s -w -X 'one-api/common.Version=${{ matrix.tag }}' -extldflags '-static'" -o new-api

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ matrix.tag }}
        files: new-api/new-api