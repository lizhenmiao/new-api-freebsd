name: Robust Tag Builder

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Enable test mode (true/false)'
        required: false
        default: 'false'
      test_tags:
        description: 'Comma-separated tags (e.g. v1.0.0,v1.0.1)'
        required: false

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.setup.outputs.matrix }}
      has_tags: ${{ steps.setup.outputs.has_tags }}
    steps:
    - name: Validate test inputs
      if: inputs.test_mode == 'true'
      run: |
        if [ -z "${{ inputs.test_tags }}" ]; then
          echo "::error::Test mode requires test_tags input"
          exit 1
        fi

    - name: Get valid tags
      id: get-tags
      uses: actions/github-script@v7
      with:
        script: |
          const mode = '${{ inputs.test_mode }}' === 'true'
          let tags = []

          if (mode) {
            // 测试模式：处理输入的标签
            tags = process.env.INPUT_TEST_TAGS
              .split(',')
              .map(t => t.trim())
              .filter(Boolean)
          } else {
            // 正常模式：获取所有上游标签
            const { data } = await github.paginate(
              github.rest.repos.listTags, {
                owner: 'Calcium-Ion',
                repo: 'new-api',
                per_page: 100
              }
            )
            tags = data.map(t => t.name)
          }

          // 获取现有release
          const { data: releases } = await github.paginate(
            github.rest.repos.listReleases, {
              owner: context.repo.owner,
              repo: context.repo.repo
            }
          )
          const existing = new Set(releases.map(r => r.tag_name))

          // 过滤未构建的标签
          const missing = tags.filter(t => !existing.has(t))

          core.setOutput('tags', JSON.stringify(missing))
          core.setOutput('has_tags', missing.length > 0 ? 'true' : 'false')

    - name: Generate matrix
      id: setup
      run: |
        TAGS=${{ steps.get-tags.outputs.tags }}
        HAS_TAGS=${{ steps.get-tags.outputs.has_tags }}

        if [ "$HAS_TAGS" = "false" ]; then
          echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          echo "No tags to build"
          exit 0
        fi

        # 生成矩阵配置
        matrix_json=$(echo "$TAGS" | jq -c '{include: map({tag: .})}')
        echo "matrix=${matrix_json}" >> $GITHUB_OUTPUT
        echo "Generated matrix: ${matrix_json}"

  build:
    needs: prepare
    if: ${{ fromJson(needs.prepare.outputs.matrix).include != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
      max-parallel: ${{ inputs.test_mode == 'true' && 3 || 10 }}
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Clone target version
      run: |
        echo "Building tag: ${{ matrix.tag }}"
        git clone -b "${{ matrix.tag }}" --depth 1 \
          https://github.com/Calcium-Ion/new-api

    - name: Build Frontend
      working-directory: new-api/web
      run: |
        npm ci --no-audit --prefer-offline
        REACT_APP_VERSION="${{ matrix.tag }}" npm run build

    - name: Build Backend
      uses: vmactions/freebsd-vm@v1
      with:
        usesh: true
        release: 13.2
        prepare: |
          pkg install -y jq wget curl git gcc bash gawk gsed
          wget -q https://dl.google.com/go/go1.23.4.freebsd-amd64.tar.gz
          tar -C /usr/local -xzf go1.23.4.freebsd-amd64.tar.gz
          ln -s /usr/local/go/bin/go /usr/local/bin/go
        run: |
          cd new-api
          go mod download
          go build -ldflags "-s -w -X 'one-api/common.Version=${{ matrix.tag }}' -extldflags '-static'" -o new-api

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ matrix.tag }}
        files: new-api/new-api