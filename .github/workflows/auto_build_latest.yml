name: Optimized Auto Build Latest Tag

on:
  schedule:
    - cron: '0 19 * * *' # UTC 19:00 (北京时间 03:00)
  workflow_dispatch:

jobs:
  check-latest:
    runs-on: ubuntu-latest
    outputs:
      LATEST_TAG: ${{ steps.get_latest.outputs.LATEST_TAG }}
      CURRENT_TAG: ${{ steps.get_current.outputs.CURRENT_TAG }}
    steps:
      - name: Get Latest Tag
        id: get_latest
        uses: actions/github-script@v6
        with:
          script: |
            const { data: tags } = await github.rest.repos.listTags({
              owner: 'Calcium-Ion',
              repo: 'new-api',
            })
            const latestTag = tags.find(t => t.name.startsWith('v')).name
            core.setOutput('LATEST_TAG', latestTag)

      - name: Get Current Release
        id: get_current
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const { data: release } = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              })
              core.setOutput('CURRENT_TAG', release.tag_name)
            } catch (error) {
              core.setOutput('CURRENT_TAG', 'v0.0.0')
            }

  build:
    runs-on: ubuntu-latest
    needs: check-latest
    if: needs.check-latest.outputs.LATEST_TAG != needs.check-latest.outputs.CURRENT_TAG
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Checkout Target Code
        run: |
          git clone --depth 1 --branch ${{ needs.check-latest.outputs.LATEST_TAG }} https://github.com/Calcium-Ion/new-api

      - name: Build Frontend
        working-directory: new-api/web
        env:
          CI: false
          REACT_APP_VERSION: ${{ needs.check-latest.outputs.LATEST_TAG }}
        run: |
          npm ci --prefer-offline
          npm run build

      - name: Setup Go for BSD
        uses: crazy-max/ghaction-setup-go@v2
        with:
          version: '1.23.4'

      - name: Build Backend
        uses: vmactions/freebsd-vm@v1
        with:
          usesh: true
          release: 13.2
          prepare: |
            pkg install -y jq git gawk gsed
          run: |
            cd new-api
            go mod download
            CGO_ENABLED=0 go build -trimpath -ldflags "-s -w -X 'one-api/common.Version=${{ needs.check-latest.outputs.LATEST_TAG }}'" -o new-api

      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: new-api-freebsd
          path: new-api/new-api

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check-latest.outputs.LATEST_TAG }}
          files: new-api/new-api