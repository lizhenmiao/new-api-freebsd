name: FreeBSD Multi-Tag Builder

on:
  workflow_dispatch:
    inputs:
      test_tags:
        description: '测试版本（逗号分隔，留空处理全部未构建版本）'
        required: false

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      build_list: ${{ steps.prepare-tags.outputs.build_list }}
    steps:
      - name: 获取上游所有tags
        id: get-upstream-tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 获取按时间排序的tag列表（旧到新）
          all_tags=()
          page=1
          while :; do
            response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
              "https://api.github.com/repos/Calcium-Ion/new-api/tags?per_page=100&page=$page")
            tags=$(echo "$response" | jq -r '.[] | [.name, .commit.commit.committer.date] | @tsv' | sort -k2 | cut -f1)

            [ -z "$tags" ] && break
            all_tags+=($tags)
            ((page++))
          done
          echo "sorted_tags=${all_tags[*]}" >> $GITHUB_OUTPUT

      - name: 获取已发布版本
        id: get-released
        run: |
          # 使用GitHub CLI获取已发布版本
          released_tags=$(gh release list --limit 1000 | awk '{print $1}')
          echo "released_tags=${released_tags[*]}" >> $GITHUB_OUTPUT

      - name: 生成构建列表
        id: prepare-tags
        run: |
          IFS=' ' read -ra sorted_tags <<< "${{ steps.get-upstream-tags.outputs.sorted_tags }}"
          IFS=' ' read -ra released_tags <<< "${{ steps.get-released.outputs.released_tags }}"

          declare -A released_map
          for tag in "${released_tags[@]}"; do
            released_map[$tag]=1
          done

          build_list=()
          for tag in "${sorted_tags[@]}"; do
            [[ -z "${released_map[$tag]}" ]] && build_list+=("$tag")
          done

          # 测试模式处理
          if [ -n "${{ github.event.inputs.test_tags }}" ]; then
            IFS=',' read -ra test_tags <<< "${{ github.event.inputs.test_tags }}"
            build_list=("${test_tags[@]}")
          fi

          echo "需要构建的版本数量：${#build_list[@]}"
          echo "build_list=${build_list[*]}" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    if: ${{ needs.prepare.outputs.build_list != '[]' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      max-parallel: 3
    steps:
      - uses: actions/checkout@v4

      - name: 设置Node.js环境
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: 安装GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: 批量构建 (FreeBSD)
        uses: vmactions/freebsd-vm@v1
        with:
          usesh: true
          release: 13.2
          prepare: |
            pkg update -y
            pkg install -y git gcc bash gmake go120 node npm
            wget https://dl.google.com/go/go1.23.4.freebsd-amd64.tar.gz
            tar -C /usr/local -xzf go1.23.4.freebsd-amd64.tar.gz
            ln -s /usr/local/go/bin/go /usr/local/bin/go
            mkdir -p /builds
          run: |
            set -e
            IFS=' ' read -ra TAGS <<< "${{ needs.prepare.outputs.build_list }}"
            OUTPUT_DIR="$GITHUB_WORKSPACE/releases"
            mkdir -p "$OUTPUT_DIR"

            for TAG in "${TAGS[@]}"; do
              echo "=== 构建 $TAG ==="
              BUILD_DIR="/builds/$TAG"
              mkdir -p "$BUILD_DIR"
              cd "$BUILD_DIR"

              git clone -b "$TAG" --depth 1 https://github.com/Calcium-Ion/new-api src

              # 构建前端
              cd src/web
              npm ci --prefer-offline --no-audit --no-fund --loglevel=error
              REACT_APP_VERSION="$TAG" npm run build --silent

              # 构建后端
              cd ..
              go mod download
              go build -ldflags "-s -w -X 'one-api/common.Version=$TAG' -extldflags '-static'" -o "$OUTPUT_DIR/new-api-$TAG"

              # 清理构建目录
              cd ../..
              rm -rf "$BUILD_DIR"
            done

      - name: 上传制品
        uses: actions/upload-artifact@main
        with:
          name: freebsd-binaries
          path: ${{ github.workspace }}/releases/new-api-*
          retention-days: 3

      - name: 批量发布版本
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd "$GITHUB_WORKSPACE/releases"
          for binary in new-api-*; do
            TAG="${binary#new-api-}"
            gh release create "$TAG" \
              --title "$TAG (FreeBSD)" \
              --notes "Automated build" \
              --prerelease \
              "$binary"
          done