name: Optimized Parallel Builder

on:
  workflow_dispatch:
    inputs:
      concurrency:
        description: "Max parallel jobs"
        required: false
        default: '10'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Fetch upstream tags
      uses: actions/github-script@v7
      id: fetch-tags
      with:
        script: |
          const { data: tags } = await github.paginate(
            github.rest.repos.listTags, {
              owner: 'Calcium-Ion',
              repo: 'new-api',
              per_page: 100
            }
          )
          return tags.map(t => t.name)

    - name: Get existing releases
      uses: actions/github-script@v7
      id: existing-releases
      with:
        script: |
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          })
          return releases.map(r => r.tag_name)

    - name: Generate build matrix
      id: set-matrix
      run: |
        # 修正后的正确格式
        all_tags=(${{ toJson(steps.fetch-tags.outputs.result) }})
        existing=(${{ toJson(steps.existing-releases.outputs.result) }})

        missing=()
        for tag in "${all_tags[@]}"; do
          if [[ ! " ${existing[*]} " =~ " ${tag} " ]]; then
            missing+=("$tag")
          fi
        done

        # 生成矩阵格式
        matrix_json=$(jq -n --argjson tags "$(printf '%s\n' "${missing[@]}" | jq -R . | jq -s .)" \
          '{include: $tags | map({tag: .})}')

        echo "matrix=${matrix_json}" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
      max-parallel: ${{ inputs.concurrency }}
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup project
      run: |
        git clone -b ${{ matrix.tag }} --depth 1 https://github.com/Calcium-Ion/new-api

    - name: Build Frontend
      working-directory: new-api/web
      run: |
        npm ci
        REACT_APP_VERSION=${{ matrix.tag }} npm run build

    - name: Build Backend
      uses: vmactions/freebsd-vm@v1
      with:
        usesh: true
        release: 13.2
        prepare: |
          pkg install -y jq wget curl git gcc bash gawk gsed
          wget https://dl.google.com/go/go1.23.4.freebsd-amd64.tar.gz
          tar -C /usr/local -xzf go1.23.4.freebsd-amd64.tar.gz
          ln -s /usr/local/go/bin/go /usr/local/bin/go
        run: |
          cd new-api
          go mod download
          go build -ldflags "-s -w -X 'one-api/common.Version=${{ matrix.tag }}' -extldflags '-static'" -o new-api

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ matrix.tag }}
        files: new-api/new-api