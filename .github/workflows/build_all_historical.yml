name: Hyper Parallel Builder

on:
  workflow_dispatch:
    inputs:
      concurrency_level:
        description: "Max parallel jobs (default 10)"
        required: false
        default: "10"

jobs:
  tag-processor:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.process.outputs.matrix }}
    steps:
    - name: Query tags via GraphQL
      uses: actions/github-script@v7
      id: graphql
      with:
        script: |
          const query = `query ($owner: String!, $repo: String!, $cursor: String) {
            source: repository(owner: $owner, name: $repo) {
              refs(refPrefix: "refs/tags/", first: 100, after: $cursor, orderBy: {field: TAG_COMMIT_DATE, direction: ASC}) {
                nodes { name }
                pageInfo { endCursor hasNextPage }
              }
            }
            target: repository(owner: context.repo.owner, name: context.repo.repo) {
              releases(first: 100) {
                nodes { tagName }
              }
            }
          }`;

          let allTags = [];
          let cursor = null;
          do {
            const result = await github.graphql(query, {
              owner: 'Calcium-Ion',
              repo: 'new-api',
              cursor
            });

            allTags.push(...result.source.refs.nodes.map(n => n.name));
            cursor = result.source.refs.pageInfo.hasNextPage ? result.source.refs.pageInfo.endCursor : null;
          } while (cursor)

          const existing = new Set(result.target.releases.nodes.map(n => n.tagName));
          const missing = allTags.filter(t => !existing.has(t));

          return { missing, allTags };

    - name: Generate dynamic matrix
      id: process
      run: |
        # 从GitHub Script获取数据
        MISSING_TAGS=${{ toJson(steps.graphql.outputs.result.missing) }}
        ALL_TAGS=${{ toJson(steps.graphql.outputs.result.allTags) }}

        # 生成动态矩阵
        readarray -t tags < <(jq -r '.[]' <<< "$MISSING_TAGS")
        matrix_json="{\"include\":[]}"

        for tag in "${tags[@]}"; do
          matrix_json=$(jq --arg tag "$tag" \
            '.include += [{"tag": $tag}]' <<< "$matrix_json")
        done

        echo "matrix=$matrix_json" >> $GITHUB_OUTPUT

  build:
    needs: tag-processor
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.tag-processor.outputs.matrix) }}
      max-parallel: ${{ inputs.concurrency_level }}
      fail-fast: false
    steps:
    - uses: actions/checkout@v4

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          new-api/web/node_modules
          ~/go/pkg/mod
        key: ${{ runner.os }}-${{ matrix.tag }}-${{ hashFiles('new-api/web/package-lock.json', 'new-api/go.mod') }}

    - name: Setup Environment
      run: |
        git clone -b ${{ matrix.tag }} --depth 1 https://github.com/Calcium-Ion/new-api

    - name: Build Frontend
      working-directory: new-api/web
      env:
        CI: false
      run: |
        npm ci --silent
        REACT_APP_VERSION=${{ matrix.tag }} npm run build

    - name: Build Backend
      uses: vmactions/freebsd-vm@v1
      with:
        usesh: true
        release: 13.2
        env:
          TAG: ${{ matrix.tag }}
        prepare: |
          pkg install -y jq wget curl git gcc bash gawk gsed
          wget https://dl.google.com/go/go1.23.4.freebsd-amd64.tar.gz
          tar -C /usr/local -xzf go1.23.4.freebsd-amd64.tar.gz
          ln -s /usr/local/go/bin/go /usr/local/bin/go
        run: |
          cd new-api
          go mod download
          go build -ldflags "-s -w -X 'one-api/common.Version=$TAG' -extldflags '-static'" -o new-api

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ matrix.tag }}
        files: new-api/new-api